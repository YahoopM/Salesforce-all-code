name: Jira → MCP Codegen

on:
  repository_dispatch:
    types: [jira_ticket]

jobs:
  from-jira:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract payload
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const p = context.payload.client_payload || {};
            core.setOutput('jiraKey', p.key || 'TICKET-000');
            core.setOutput('title', p.title || 'Generated Change');
            core.setOutput('description', p.description || '');

      - name: Generate changes
        env:
          TICKET_KEY: ${{ steps.extract.outputs.jiraKey }}
          TICKET_TITLE: ${{ steps.extract.outputs.title }}
          TICKET_DESC: ${{ steps.extract.outputs.description }}
        run: |
          node ./scripts/codegen/generate.js

      - name: Create branch, commit, and push
        env:
          TICKET_KEY: ${{ steps.extract.outputs.jiraKey }}
        run: |
          branch="feature/${TICKET_KEY}-mcp"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git checkout -b "$branch" || git checkout "$branch"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"; exit 0
          fi
          git commit -m "${TICKET_KEY}: scaffold changes via MCP codegen"
          git push --set-upstream origin "$branch"

      - name: Open Pull Request
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const jiraKey = '${{ steps.extract.outputs.jiraKey }}';
            const title = '${{ steps.extract.outputs.title }}';
            const body = '${{ steps.extract.outputs.description }}';
            const branch = `feature/${jiraKey}-mcp`;
            const { data: repo } = await github.rest.repos.get({ owner: context.repo.owner, repo: context.repo.repo });
            const base = repo.default_branch;
            const prs = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', head: `${context.repo.owner}:${branch}` });
            if (prs.data.length) { core.info('PR already exists'); return; }
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[${jiraKey}] ${title}`,
              head: branch,
              base,
              body: (body || '') + "\n\nGenerated by Jira webhook → MCP."
            });


